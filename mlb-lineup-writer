#----------------------------------------------------------s
# start editing here
#-----------------------------------------------------------

myteam = "Philadelphia Phillies"    # over 11,000 losses.  Feel the angst.
# myteam = "Arizona Diamondbacks"
# myteam = "Athletics"
# myteam = "Atlanta Braves"
# myteam = "Baltimore Orioles"
# myteam = "Boston Red Sox"
# myteam = "Chicago Cubs"
# myteam = "Chicago White Sox"
# myteam = "Cincinnati Reds"
# myteam = "Cleveland Guardians"
# myteam = "Colorado Rockies"
# myteam = "Detroit Tigers"
# myteam = "Houston Astros"
# myteam = "Kansas City Royals"
# myteam = "Los Angeles Angels"
# myteam = "Los Angeles Dodgers"
# myteam = "Miami Marlins"
# myteam = "Milwaukee Brewers"
# myteam = "Minnesota Twins"
# myteam = "New York Mets"
# myteam = "New York Yankees"
# myteam = "Pittsburgh Pirates"
# myteam = "San Diego Padres"
# myteam = "San Francisco Giants"
# myteam = "Seattle Mariners"
# myteam = "St. Louis Cardinals"
# myteam = "Tampa Bay Rays"
# myteam = "Texas Rangers"
# myteam = "Toronto Blue Jays"
# myteam = "Washington Nationals"

# this is hard-coded for now.....
#template = "Reisner"               # my custom Reisner scorekeeping derivative template
template = "Lou"                   # my custom thirty81project.com generic scorecard derivative template

input_filename  = "input.pdf"
output_filename = "output.pdf"

#-----------------------------------------------------------
# stop editing here
#-----------------------------------------------------------

import sys
import statsapi
schedule = statsapi.get( "schedule", {"sportId":1} )

from pypdf             import PdfReader,PdfWriter
from pypdf.annotations import FreeText
reader = PdfReader(input_filename)    # TODO: prompt for input filename
writer = PdfWriter()                  # TODO: prompt for output filename

# TODO: select a date
# date = schedule['dates'][0]['date']

# TODO: loop through games to pick the one you want
# TODO: support second game of doubleheader

#-----------------------------------------------------------
# find our game and grab the pertinent info from it
#-----------------------------------------------------------

# today's games
games = schedule['dates'][0]['games']

for game in games:
    away_team = game['teams']['away']['team']['name'];
    home_team = game['teams']['home']['team']['name'];

    if (home_team == myteam) or (away_team == myteam):

        print(away_team + " at " + home_team)
        away_teamid = game['teams']['away']['team']['id'];
        home_teamid = game['teams']['home']['team']['id'];

        away_record = str(game['teams']['away']['leagueRecord']['wins']) + "-" +  str(game['teams']['away']['leagueRecord']['losses'])
        home_record = str(game['teams']['home']['leagueRecord']['wins']) + "-" +  str(game['teams']['home']['leagueRecord']['losses'])

        todays_date = schedule['dates'][0]['date']
        print("==> today = ", todays_date)

        gameId   = game['gamePk']
        gamedata = statsapi.boxscore_data(gameId)

        # walk the game playerInfo and build a hash of short id=>name for later reference
        playerInfo  = { }
        boxscoreMap = { }

        hitter_stats  = { }  # hitting only
        pitcher_stats = { }  # pitching only
        player_stats  = { }  # both hitting and pitching
        side = { }           # bats or hits

        # grab player stats etc - this takes about 6 seconds for one game or so
        # we grab both hitting and pitching to handle the case where a player
        # has both hit and pitched in the current season

        print("... mapping players and getting their stats ...")
        playerdata  = gamedata['playerInfo']
        for id in playerdata:

            shortid              = playerdata[id]['id']
            boxscoreName         = playerdata[id]['boxscoreName']
            boxscoreMap[shortid] = boxscoreName

            player_stats[shortid]  = statsapi.player_stat_data(shortid, group="[hitting,pitching]",  type="season")

            # stats are in an array with 'group' denoting hitting or pitching
            # we grab the avg from hitting stats, and era from pitching stats

            for stats in player_stats[shortid]['stats']:
                if (stats['group'] == "hitting"):
                    try:
                        hitter_stats[shortid] = stats['stats']
                    except:
                        hitter_stats[shortid] = "n/a"
                    # convert Right to R and Left to L
                    try:
                        side[shortid] = player_stats[shortid]['bat_side'][:1]
                    except:
                        side[shortid] = "n/a"

                elif (stats['group'] == "pitching"):
                    try:
                        pitcher_stats[shortid] = stats['stats']
                    except:
                        pitcher_stats[shortid] = "n/a"
                    # convert Right to R and Left to L
                    try:
                        side[shortid] = player_stats[shortid]['pitch_hand'][:1]
                    except:
                        side[shortid] = "-"

        print("... done mapping players and getting their stats ...")

        print("-------- away bullpen --------")
        away_pen = [ ]
        away_pen_eras = [ ]
        for p in gamedata['away']['bullpen']:
            away_pen.append(boxscoreMap[p])
            try:
                away_pen_eras.append(pitcher_stats[p]['era'])
            except:
                away_pen_eras.append("n/a")
        print(away_pen)
        print(away_pen_eras)

        print("-------- away bench --------")
        away_bench = [ ]
        away_bench_stats = [ ]
        for p in gamedata['away']['bench']:
            away_bench.append(boxscoreMap[p])
            try:
                away_bench_stats.append(hitter_stats[p]['avg'])
            except:
                away_bench_stats.append("n/a")
        print(away_bench)
        print(away_bench_stats)

        print("-------- away order --------")
        away_order = [ ]
        away_batter_avgs = [ ]
        away_batter_side = [ ]
        # TODO: this needs work - for a player with no games played yet
        #       the try/except should be in the finding the player stats
        #       up top in this program, not in every place the stats
        #       need to be used below.  For now we'll brute force it.
        for p in gamedata['away']['battingOrder']:
            away_order.append(boxscoreMap[p])
            try:
                away_batter_avgs.append(hitter_stats[p]['avg'])
            except:
                away_batter_avgs.append("---")
            try:
                away_batter_side.append(side[p])
            except:
                away_batter_side.append("-")
        print(away_order)
        print(away_batter_avgs)

        print("-------- away starter ------")
        away_starter = [ ]
        away_starter_eras = [ ]
        away_starter_side = [ ]
        for p in gamedata['away']['pitchers']:
            away_starter.append(boxscoreMap[p])
            try:
                away_starter_eras.append(pitcher_stats[p]['era'])
            except:
                away_starter_side.append("-")
            break   # first pitcher is starter
        print(away_starter)
        print(away_starter_eras)

  #--- home ----

        print("-------- home bullpen --------")
        home_pen = [ ]
        home_pen_eras = [ ]
        for p in gamedata['home']['bullpen']:
            home_pen.append(boxscoreMap[p])
            try:
                home_pen_eras.append(pitcher_stats[p]['era'])
            except:
                home_pen_eras.append("n/a")
        print(home_pen)
        print(home_pen_eras)

        print("-------- home bench --------")
        home_bench = [ ]
        home_bench_stats = [ ]
        for p in gamedata['home']['bench']:
            home_bench.append(boxscoreMap[p])
            try:
                home_bench_stats.append(hitter_stats[p]['avg'])
            except:
                home_bench_stats.append(n/a)
        print(home_bench)
        print(home_bench_stats)

        print("-------- home order --------")
        home_order = [ ]
        home_batter_avgs = [ ]
        home_batter_side = [ ]
        for p in gamedata['home']['battingOrder']:
            home_order.append(boxscoreMap[p])
            try:
                home_batter_avgs.append(hitter_stats[p]['avg'])
            except:
                home_batter_avgs.append("n/a")
            try:
                home_batter_side.append(side[p])
            except:
                home_batter_side.append("-")
        print(home_order)
        print(home_batter_avgs)

        print("-------- home starter ------")
        home_starter = [ ]
        home_starter_eras = [ ]
        home_starter_side = [ ]
        for p in gamedata['home']['pitchers']:
            home_starter.append(boxscoreMap[p])
            try:
                home_starter_eras.append(pitcher_stats[p]['era'])
            except:
                home_starter_eras.append("n/a")
            try:
                home_starter_side.append(side[p])
            except:
                home_starter_side.append("-")
            break   # first pitcher is starter
        print(home_starter)
        print(home_starter_eras)

  #--- done ----

        # exit looping through games (we found the right one)
        break

#-----------------------------------------------------------
# process the data for our game
#-----------------------------------------------------------

teams = [ away_team, home_team ]

# TODO: clean up terminology so these are not needed
away_batters  = away_order
away_starters = away_starter
home_batters  = home_order
home_starters = home_starter

#-------- geometry for overlays ---------
# geom = xLL, yLL, xUR, yUR
#----------------------------------------

if template == "Reisner":

    # note: anything marked as [ ] does not fit on a portrait card

    # home card geom is offset 1-2 pixels vertically

    date_loc           = [ 40, 760, 95,  770 ]

    # these geom might need tweaking when records get to nn-nnn or nnn-nn
    awayteamgeom       = [ 15, 746, 65,  756]
    awayteamrecordgeom = [ 66, 746, 107, 756]
    hometeamgeom       = [ 15, 735, 65,  743]
    hometeamrecordgeom = [ 66, 735, 107, 743]

    away_batters0 = [25, 698, 100, 708]
    away_batters1 = [25, 645, 100, 655]
    away_batters2 = [25, 590, 100, 600]
    away_batters3 = [25, 540, 100, 550]
    away_batters4 = [25, 485, 100, 495]
    away_batters5 = [25, 432, 100, 442]
    away_batters6 = [25, 380, 100, 390]
    away_batters7 = [25, 324, 100, 334]
    away_batters8 = [25, 270, 100, 280]

    away_batter_avgs0 = [ ]
    away_batter_avgs1 = [ ]
    away_batter_avgs2 = [ ]
    away_batter_avgs3 = [ ]
    away_batter_avgs4 = [ ]
    away_batter_avgs5 = [ ]
    away_batter_avgs6 = [ ]
    away_batter_avgs7 = [ ]
    away_batter_avgs8 = [ ]

    away_batter_side0 = [ ]
    away_batter_side1 = [ ]
    away_batter_side2 = [ ]
    away_batter_side3 = [ ]
    away_batter_side4 = [ ]
    away_batter_side5 = [ ]
    away_batter_side6 = [ ]
    away_batter_side7 = [ ]
    away_batter_side8 = [ ]

    away_starter0      = [25, 135, 100, 145]

    away_starter_eras0 = [ ]
    away_starter_side0 = [ ]

    home_bench0 = [231, 128, 314, 137]
    home_bench1 = [231, 118, 314, 127]
    home_bench2 = [231, 108, 314, 117]
    home_bench3 = [231,  98, 314, 107]
    home_bench4 = [231,  88, 314,  97]
    home_bench5 = [231,  78, 314,  87]
    home_bench6 = [231,  68, 314,  77]

    away_pen0  = [331, 131, 398, 140]
    away_pen1  = [331, 121, 398, 130]
    away_pen2  = [331, 111, 398, 120]
    away_pen3  = [331, 101, 398, 110]
    away_pen4  = [331,  91, 398, 100]
    away_pen5  = [331,  81, 398,  90]
    away_pen6  = [331,  71, 398,  80]
    away_pen7  = [331,  61, 398,  70]
    away_pen8  = [331,  51, 398,  60]
    away_pen9  = [331,  41, 398,  50]
    away_pen10 = [331,  31, 398,  40]
    away_pen11 = [331,  31, 398,  40]
    away_pen12 = [331,  31, 398,  40]
    away_pen13 = [331,  31, 398,  40]
    away_pen14 = [331,  31, 398,  40]

    home_batters0 = [25, 696, 100, 706]
    home_batters1 = [25, 643, 100, 653]
    home_batters2 = [25, 588, 100, 598]
    home_batters3 = [25, 538, 100, 548]
    home_batters4 = [25, 483, 100, 495]
    home_batters5 = [25, 430, 100, 440]
    home_batters6 = [25, 377, 100, 387]
    home_batters7 = [25, 324, 100, 334]
    home_batters8 = [25, 267, 100, 277]

    home_batter_avgs0 = [ ]
    home_batter_avgs1 = [ ]
    home_batter_avgs2 = [ ]
    home_batter_avgs3 = [ ]
    home_batter_avgs4 = [ ]
    home_batter_avgs5 = [ ]
    home_batter_avgs6 = [ ]
    home_batter_avgs7 = [ ]
    home_batter_avgs8 = [ ]

    home_batter_side0 = [ ]
    home_batter_side1 = [ ]
    home_batter_side2 = [ ]
    home_batter_side3 = [ ]
    home_batter_side4 = [ ]
    home_batter_side5 = [ ]
    home_batter_side6 = [ ]
    home_batter_side7 = [ ]
    home_batter_side8 = [ ]

    home_starter0      = [25, 137, 100, 147]

    home_starter_eras0 = [ ]
    home_starter_side0 = [ ]

    away_bench0 = [231, 131, 317, 140]
    away_bench1 = [231, 121, 317, 130]
    away_bench2 = [231, 111, 317, 120]
    away_bench3 = [231, 101, 317, 110]
    away_bench4 = [231,  91, 317, 100]
    away_bench5 = [231,  81, 317,  90]
    away_bench6 = [231,  71, 317,  80]

    home_pen0  = [337, 130, 398, 139]
    home_pen1  = [337, 120, 398, 129]
    home_pen2  = [337, 110, 398, 119]
    home_pen3  = [337, 100, 398, 109]
    home_pen4  = [337,  90, 398,  99]
    home_pen5  = [337,  80, 398,  89]
    home_pen6  = [337,  70, 398,  79]
    home_pen7  = [337,  60, 398,  69]
    home_pen8  = [337,  50, 398,  59]
    home_pen9  = [337,  40, 398,  49]
    home_pen10 = [337,  30, 398,  39]
    home_pen11 = [337,  20, 398,  39]
    home_pen12 = [337,  10, 398,  39]
    home_pen13 = [ ]
    home_pen14 = [ ]

elif template == "Lou":

    dategeom = [ 40, 760, 95, 770 ]
    awayteamrecordgeom = [120, 570, 200, 580]
    awayteamgeom       = [120, 560, 200, 570]
    hometeamrecordgeom = [120, 570, 200, 580]
    hometeamgeom       = [120, 560, 200, 570]

    # this is limited to 62 pixels wide due to template
    scoreboard_awayteamgeom = [374, 58, 426, 68]
    scoreboard_hometeamgeom = [374, 38, 426, 48]

    away_batters0 = [70, 523, 150, 533]
    away_batters1 = [70, 486, 150, 496]
    away_batters2 = [70, 447, 150, 457]
    away_batters3 = [70, 408, 150, 418]
    away_batters4 = [70, 371, 150, 381]
    away_batters5 = [70, 332, 150, 342]
    away_batters6 = [70, 293, 150, 303]
    away_batters7 = [70, 255, 150, 265]
    away_batters8 = [70, 217, 150, 227]

    away_batter_avgs0 = [150, 523, 170, 533]
    away_batter_avgs1 = [150, 486, 170, 496]
    away_batter_avgs2 = [150, 447, 170, 457]
    away_batter_avgs3 = [150, 408, 170, 418]
    away_batter_avgs4 = [150, 371, 170, 381]
    away_batter_avgs5 = [150, 332, 170, 342]
    away_batter_avgs6 = [150, 293, 170, 303]
    away_batter_avgs7 = [150, 255, 170, 265]
    away_batter_avgs8 = [150, 217, 170, 227]

    away_batter_side0 = [48, 523, 58, 533]
    away_batter_side1 = [48, 486, 58, 496]
    away_batter_side2 = [48, 447, 58, 457]
    away_batter_side3 = [48, 408, 58, 418]
    away_batter_side4 = [48, 371, 58, 381]
    away_batter_side5 = [48, 332, 58, 342]
    away_batter_side6 = [48, 293, 58, 303]
    away_batter_side7 = [48, 258, 58, 265]
    away_batter_side8 = [48, 217, 58, 227]

    away_starter_side0 = [48,  127,  58, 137]
    away_starter0      = [70,  127, 150, 137]
    away_starter_eras0 = [150, 127, 170, 137]

    away_bench0 = [395, 141, 455, 150]
    away_bench1 = [395, 131, 455, 140]
    away_bench2 = [395, 121, 455, 130]
    away_bench3 = [395, 111, 455, 120]
    away_bench4 = [395, 101, 455, 110]
    away_bench5 = [395,  91, 455, 100]
    away_bench6 = [395,  81, 455,  90]

    away_pen0  = [501, 140, 568, 150]
    away_pen1  = [501, 130, 568, 140]
    away_pen2  = [501, 120, 568, 130]
    away_pen3  = [501, 110, 568, 120]
    away_pen4  = [501, 100, 568, 110]
    away_pen5  = [570, 140, 640, 150]
    away_pen6  = [570, 130, 640, 140]
    away_pen7  = [570, 120, 640, 130]
    away_pen8  = [570, 110, 640, 120]
    away_pen9  = [570, 100, 640, 110]
    away_pen10 = [642, 140, 712, 150]
    away_pen11 = [642, 130, 712, 140]
    away_pen12 = [642, 120, 712, 130]
    away_pen13 = [642, 110, 712, 120]
    away_pen14 = [642, 100, 712, 110]

    home_batters0 = [70, 523, 150, 533]
    home_batters1 = [70, 486, 150, 496]
    home_batters2 = [70, 447, 150, 457]
    home_batters3 = [70, 408, 150, 418]
    home_batters4 = [70, 371, 150, 381]
    home_batters5 = [70, 332, 150, 342]
    home_batters6 = [70, 293, 150, 303]
    home_batters7 = [70, 255, 150, 265]
    home_batters8 = [70, 217, 150, 227]

    home_batter_avgs0 = [150, 523, 170, 533]
    home_batter_avgs1 = [150, 486, 170, 496]
    home_batter_avgs2 = [150, 447, 170, 457]
    home_batter_avgs3 = [150, 408, 170, 418]
    home_batter_avgs4 = [150, 371, 170, 381]
    home_batter_avgs5 = [150, 332, 170, 342]
    home_batter_avgs6 = [150, 293, 170, 303]
    home_batter_avgs7 = [150, 255, 170, 265]
    home_batter_avgs8 = [150, 217, 170, 227]

    home_batter_side0 = [48, 523, 58, 533]
    home_batter_side1 = [48, 486, 58, 496]
    home_batter_side2 = [48, 447, 58, 457]
    home_batter_side3 = [48, 408, 58, 418]
    home_batter_side4 = [48, 371, 58, 381]
    home_batter_side5 = [48, 332, 58, 342]
    home_batter_side6 = [48, 293, 58, 303]
    home_batter_side7 = [48, 255, 58, 265]
    home_batter_side8 = [48, 217, 58, 227]

    home_starter_side0 = [48, 127, 58, 137]

    # home page only for Lou template
    date_loc   = [380,  30, 450, 40 ]

    home_starter0 = [70, 127, 150, 137]
    home_starter_eras0 = [150, 127, 170, 137]

    home_bench0 = [395, 141, 455, 150]
    home_bench1 = [395, 131, 455, 140]
    home_bench2 = [395, 121, 455, 130]
    home_bench3 = [395, 111, 455, 120]
    home_bench4 = [395, 101, 455, 110]
    home_bench5 = [395,  91, 455, 100]
    home_bench6 = [395,  81, 455,  90]

    home_pen0  = [501, 140, 568, 150]
    home_pen1  = [501, 130, 568, 140]
    home_pen2  = [501, 120, 568, 130]
    home_pen3  = [501, 110, 568, 120]
    home_pen4  = [501, 100, 568, 110]
    home_pen5  = [570, 140, 640, 150]
    home_pen6  = [570, 130, 640, 140]
    home_pen7  = [570, 120, 640, 130]
    home_pen8  = [570, 110, 640, 120]
    home_pen9  = [570, 100, 640, 110]
    home_pen10 = [642, 140, 712, 150]
    home_pen11 = [642, 130, 712, 140]
    home_pen12 = [642, 120, 712, 130]
    home_pen13 = [642, 110, 712, 120]
    home_pen14 = [642, 100, 712, 110]

    # home page only for Lou template
    date_loc   = [380,  30, 450, 40 ]

else:
    print("unknown or missing template name - exiting")
    sys.exit(1)

#-----------------------------------------------------
# define pages and add annotations to PDF template
#-----------------------------------------------------

page0 = reader.pages[0]
writer.add_page(page0)
page1 = reader.pages[1]
writer.add_page(page1)

# for some reason setting fonts/etc doesn't work
# although background color in this example does (odd)
#   writer.add_annotation(page_number=0,
#          annotation = FreeText(text="Schwarber", rect=(25, 300, 90, 410),
#          font="Courier", bold=True,italic=True, font_size=20,
#          font_color="00ff00",border_color="0000ff",background_color="00ff00",))

#--- overwrite it ---
#
# item = name of the variable and its location list
#    example: away_batters[ ] and away_batters0-9

def write_annotation(p,item,qty):
    players = eval(item)
    for n in range(qty):
        loc = eval(item + str(n))
        try:
            writer.add_annotation(page_number=p,annotation=FreeText(text=players[n], rect=loc))
        except:
            pass

write_annotation(p=0, item="away_batters",       qty=9 )
write_annotation(p=0, item="away_bench",         qty=7 )
write_annotation(p=0, item="home_pen",           qty=15)
write_annotation(p=0, item="home_starter",       qty=1)

write_annotation(p=1, item="home_batters",       qty=9 )
write_annotation(p=1, item="home_bench",         qty=7 )
write_annotation(p=1, item="away_pen",           qty=15)
write_annotation(p=1, item="away_starter",       qty=1)

if template == "Reisner":
    writer.add_annotation(page_number=1,annotation=FreeText(text=todays_date, rect=date_loc))
    writer.add_annotation(page_number=1,annotation=FreeText(text=teams[0],    rect=awayteamgeom))
    writer.add_annotation(page_number=1,annotation=FreeText(text=away_record, rect=awayteamrecordgeom))
    writer.add_annotation(page_number=1,annotation=FreeText(text=teams[1],    rect=hometeamgeom))
    writer.add_annotation(page_number=1,annotation=FreeText(text=home_record, rect=hometeamrecordgeom))

if template == "Lou":

    # these don't fit on a portrait orientation template
    write_annotation(p=0, item="away_batter_avgs",   qty=9)
    write_annotation(p=1, item="home_batter_avgs",   qty=9)
    write_annotation(p=0, item="home_starter_eras",  qty=1)
    write_annotation(p=1, item="away_starter_eras",  qty=1)
    write_annotation(p=0, item="away_batter_side",   qty=9)
    write_annotation(p=1, item="home_batter_side",   qty=9)
    write_annotation(p=0, item="home_starter_side",  qty=1)
    write_annotation(p=1, item="away_starter_side",  qty=1)

    # scoreboard is on away team only
    writer.add_annotation(page_number=0,annotation=FreeText(text=away_team,   rect=scoreboard_awayteamgeom))
    writer.add_annotation(page_number=0,annotation=FreeText(text=home_team,   rect=scoreboard_hometeamgeom))

    writer.add_annotation(page_number=1,annotation=FreeText(text=todays_date, rect=date_loc))

    writer.add_annotation(page_number=0,annotation=FreeText(text=teams[0],    rect=awayteamgeom))
    writer.add_annotation(page_number=0,annotation=FreeText(text=away_record, rect=awayteamrecordgeom))
    writer.add_annotation(page_number=1,annotation=FreeText(text=teams[1],    rect=hometeamgeom))
    writer.add_annotation(page_number=1,annotation=FreeText(text=home_record, rect=hometeamrecordgeom))

print("today = ", todays_date)

#---- all done, write it out ----

with open(output_filename, "wb") as fp:
    writer.write(fp)
sys.exit(0)

#-------------------------------------------------
# this is a game
#  print(schedule['dates'][0]['games'][0])
#-------------------------------------------------
#    {"gamePk": 778424,
#     "gameGuid": "4d819347-b415-4e92-a159-f6efd40a7f8d",
#     "link": "/api/v1.1/game/778424/feed/live",
#     "gameType": "R",
#     "season": "2025",
#     "gameDate": "2025-04-07T19:10:00Z",
#     "officialDate": "2025-04-07",
#     "status": {"abstractGameState": "Preview",
#     "codedGameState": "P",
#     "detailedState": "Pre-Game",
#     "statusCode": "P",
#     "startTimeTBD": False,
#     "abstractGameCode": "P"},
#     "teams": {
#        "away": {"leagueRecord": {"wins": 6, "losses": 3, "pct": ".667"},
#               "score": 0,
#               "team": {"id": 147, "name": "New York Yankees", "link": "/api/v1/teams/147"},
#               "splitSquad": False,
#               "seriesNumber": 4
#                },
#         "home": {"leagueRecord": {"wins": 5, "losses": 4, "pct": ".556"},
#              "score": 0,
#               "team": {"id": 116, "name": "Detroit Tigers", "link": "/api/v1/teams/116"},
#               "splitSquad": False,
#               "seriesNumber": 4}
#                },
#     "venue": {"id": 2394, "name": "Comerica Park", "link": "/api/v1/venues/2394"},
#     "content": {"link": "/api/v1/game/778424/content"},
#     "gameNumber": 1,
#     "publicFacing": True,
#     "doubleHeader": "N",
#     "gamedayType": "P",
#     "tiebreaker": "N",
#     "calendarEventID": "14-778424-2025-04-07",
#     "seasonDisplay": "2025",
#     "dayNight": "day",
#     "scheduledInnings": 9,
#     "reverseHomeAwayStatus": False,
#     "inningBreakLength": 120,
#     "gamesInSeries": 3,
#     "seriesGameNumber": 1,
#     "seriesDescription": "Regular Season",
#     "recordSource": "S",
#     "ifNecessary": "N",
#     "ifNecessaryDescription": "Normal Game"
#    }
#
#---------------------------------
# a batter and their hitting stats
#   print(statsapi.player_stat_data(shortid, group="[hitting,pitching]",type="season"))
#---------------------------------
#
# {
#  "id": 669016,
#  "first_name": "Brandon",
#  "last_name": "Marsh",
#  "active": True,
#  "current_team": "Philadelphia Phillies",
#  "position": "CF",
#  "nickname": None,
#  "last_played": None,
#  "mlb_debut": "2021-07-18",
#  "bat_side": "Left",
#  "pitch_hand": "Right",
#  "stats":
#     [
#         {
#         "type": "season",
#         "group": "hitting",
#         "season": "2025",
#         "stats": {
#             "gamesPlayed": 17,
#             "groundOuts": 12,
#             "airOuts": 12,
#             "runs": 3,
#             "doubles": 0,
#             "triples": 0,
#             "homeRuns": 1,
#             "strikeOuts": 16,
#             "baseOnBalls": 7,
#             "intentionalWalks": 0,
#             "hits": 4,
#             "hitByPitch": 0,
#             "avg": ".095",
#             "atBats": 42,
#             "obp": ".220",
#             "slg": ".167",
#             "ops": ".387",
#             "caughtStealing": 1,
#             "stolenBases": 0,
#             "stolenBasePercentage": ".000",
#             "groundIntoDoublePlay": 1,
#             "numberOfPitches": 212,
#             "plateAppearances": 51,
#             "totalBases": 7,
#             "rbi": 5,
#             "leftOnBase": 27,
#             "sacBunts": 1,
#             "sacFlies": 1,
#             "babip": ".115",
#             "groundOutsToAirouts": "1.00",
#             "catchersInterference": 0,
#             "atBatsPerHomeRun":
#             "42.00"
#             }
#         }
#     ]
# }
#
#---------------------------------
# a pitcher and their stats
#   print(statsapi.player_stat_data(shortid, group="[hitting,pitching]",type="season"))
#---------------------------------
#
# {
#     "id": 621237,
#     "first_name": "José",
#     "last_name": "Alvarado",
#     "active": True,
#     "current_team": "Philadelphia Phillies",
#     "position": "P",
#     "nickname": "El Pocho",
#     "last_played": None,
#     "mlb_debut": "2017-05-03",
#     "bat_side": "Left",
#     "pitch_hand": "Left",
#     "stats": [
#         {
#             "type": "season",
#             "group": "pitching",
#             "season": "2025",
#             "stats": {
#                 "gamesPlayed": 11,
#                 "gamesStarted": 0,
#                 "groundOuts": 8,
#                 "airOuts": 9,
#                 "runs": 3,
#                 "doubles": 1,
#                 "triples": 0,
#                 "homeRuns": 1,
#                 "strikeOuts": 15,
#                 "baseOnBalls": 2,
#                 "intentionalWalks": 0,
#                 "hits": 11,
#                 "hitByPitch": 0,
#                 "avg": ".256",
#                 "atBats": 43,
#                 "obp": ".289",
#                 "slg": ".349",
#                 "ops": ".638",
#                 "caughtStealing": 0,
#                 "stolenBases": 0,
#                 "stolenBasePercentage": ".---",
#                 "groundIntoDoublePlay": 0,
#                 "numberOfPitches": 190,
#                 "era": "2.53",
#                 "inningsPitched": "10.2",
#                 "wins": 2,
#                 "losses": 0,
#                 "saves": 5,
#                 "saveOpportunities": 5,
#                 "holds": 2,
#                 "blownSaves": 0,
#                 "earnedRuns": 3,
#                 "whip": "1.22",
#                 "battersFaced": 45,
#                 "outs": 32,
#                 "gamesPitched": 11,
#                 "completeGames": 0,
#                 "shutouts": 0,
#                 "strikes": 126,
#                 "strikePercentage": ".660",
#                 "hitBatsmen": 0,
#                 "balks": 0,
#                 "wildPitches": 1,
#                 "pickoffs": 0,
#                 "totalBases": 15,
#                 "groundOutsToAirouts": "0.89",
#                 "winPercentage": "1.000",
#                 "pitchesPerInning": "17.81",
#                 "gamesFinished": 7,
#                 "strikeoutWalkRatio": "7.50",
#                 "strikeoutsPer9Inn": "12.66",
#                 "walksPer9Inn": "1.69",
#                 "hitsPer9Inn": "9.28",
#                 "runsScoredPer9": "2.53",
#                 "homeRunsPer9": "0.84",
#                 "inheritedRunners": 1,
#                 "inheritedRunnersScored": 0,
#                 "catchersInterference": 0,
#                 "sacBunts": 0,
#                 "sacFlies": 0
#         }
#       }
#     ]
# }
#
#-----------------------------------------------------------
